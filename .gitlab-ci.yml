# Copyright (C) 2020  Christian Berger
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Which Docker image shall be used on the GitLab runner?
image: docker:latest

# Details about how to connect to the Docker service to run this build.
variables:
  DOCKER_HOST: tcp://172.17.0.1:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  DOCKER_BUILDKIT: 1
  DOCKER_CLI_EXPERIMENTAL: enabled
  BUILDX_URL: https://github.com/docker/buildx/releases/download/v0.3.1/buildx-v0.3.1.linux-amd64
  BUILDX_BUILDER: buildxBilder
  BUILDX_PLATFORM: linux/amd64,linux/arm64,linux/arm/v7
  #TEST_CMD: <some command to run on your image to (smoke-)test whether all is good>
  IMAGE: registry.git.chalmers.se/courses/dit638/students/group_01

services:
  - name: docker:18-dind
    command: ["--experimental"]
stages:
  - build
  - deploy
  - test
# Display information before we start the build.
before_script:
  - mkdir -p $HOME/.docker/cli-plugins/
  - wget -O $HOME/.docker/cli-plugins/docker-buildx $BUILDX_URL
  - chmod a+x $HOME/.docker/cli-plugins/docker-buildx
  - "echo -e '{\n  \"experimental\": \"enabled\"\n}' | tee $HOME/.docker/config.json"
  - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  - docker buildx create --use --driver docker-container --name ${BUILDX_BUILDER} --platform=${BUILDX_PLATFORM}
  - docker buildx inspect --bootstrap ${BUILDX_BUILDER}
  - docker buildx ls
  - docker info
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY


# This section describes what shall be done to build and test the project.
build-and-test:
  tags:
    - docker-build
  stage: build
  rules:
    - if: $CI_COMMIT_TAG == null
  script:
    - docker build -f Dockerfile .
    - docker build -f GraphDockerfile .

# This section describes what shall be done to deploy artefacts from the project.
release:
  tags:
    - docker-build
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG != null && $CI_COMMIT_TAG =~ /^v\d[.]\d[.]\d$/
  script:
    - docker buildx build --platform=${BUILDX_PLATFORM} -t "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG" --push "."


# This is the part for the Covarege

#coverage-job:
#  image: ubuntu:18.04
#  before_script:
#  - apt-get -qq update && apt-get -qq install -y make autoconf gcc g++ gcovr ggcov lcov
#  tags:
#    - docker-build
#  stage: test
#  script:
#    - cd src/
#    - g++ -Wall --coverage -fprofile-arcs -ftest-coverage template-opencv.cpp -o mybinary
#    - ./mybinary
#    - ls
#    - gcov template-opencv.cpp
#    - lcov --directory . --capture --output-file coverage.info
#    - gcovr -r .
#    - lcov --list coverage.info
#    - genhtml -o coverage coverage.info

#  artifacts:
#    paths:
#      - coverage/
